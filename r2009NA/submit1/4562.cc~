//*****************************************************************************
// CPSC 3200          Professor: Howard Cheng
//                    Teaching Assistant: Darcy Best
// Written By: Camara Lerner
// Problem number: 
// Description: 
//*****************************************************************************

// Determines the point(s) of intersection if a circle and a line
//
// Author: Darcy Best
// Date  : May 1, 2010
// Source: http://mathworld.wolfram.com/Circle-LineIntersection.html

#include <iostream>
#include <cmath>
#include <iomanip>
#include <algorithm>
using namespace std;

#define SQR(X) ((X) * (X))
typedef pair<double, double> pdd;

// How close to call equal
const double EPS = 1e-7;

bool dEqual(double x,double y){
  return fabs(x-y) < EPS;
}

class Point{
public:
   Point() {}
   Point(const double &first, const double &second) : x(first), y(second)  {}
   Point(const Point & me) : x(me.x), y(me.y) {}
   double x,y;
};

class Line{
public:
   Line() {}
   Line(const Point & first, const Point &second) : p1(first), p2(second) {}
  Point p1,p2;
};

struct Circle{
  Point centre;
  double radius;
};

// Input of:
//  - 2 distinct points on the line
//  - The centre of the circle
//  - The radius of the circle
// Output:
//  Number of points of intersection points
//  If 1 or 2, then ans1 and ans2 contain those points.
int intersect_iline_circle(Line l,Circle c,Point& ans1,Point& ans2){
  Point p1 = l.p1;
  Point p2 = l.p2;
	
  Point circCentre = c.centre;
  double rad = c.radius;
	
  p1.x -= circCentre.x;
  p2.x -= circCentre.x;
  p1.y -= circCentre.y;
  p2.y -= circCentre.y;
	
  double dx = p2.x - p1.x;
  double dy = p2.y - p1.y;
  double dr = SQR(dx) + SQR(dy);
  double D  = p1.x*p2.y - p2.x*p1.y;
	
  double desc = SQR(rad)*dr - SQR(D);
	
  if(dEqual(desc,0)){
    ans1.x = (D*dy) / dr;
    ans1.y = (-D*dx) / dr;
    return 1;
  } else if(desc < 0){
    return 0;
  }
	
  double sgn = (dy < -EPS ? -1 : 1);
	
  ans1.x = circCentre.x + (D*dy + sgn*dx*sqrt(desc)) / dr;
  ans1.y = circCentre.y + (-D*dx + abs(dy)*sqrt(desc)) / dr;
	
  ans2.x = circCentre.x + (D*dy - sgn*dx*sqrt(desc)) / dr;
  ans2.y = circCentre.y + (-D*dx - abs(dy)*sqrt(desc)) / dr;
	
  return 2;
}

double dist(const Point &a, const Point &b) {
   double x = (a.x - b.x);
   double y = (a.y - b.y);
   return sqrt(x*x + y*y);
}

double dist(const Line &path) {
   return dist(path.p1, path.p2);
}

double dist(const pdd &a, const pdd &b) {
   double x = (a.first - b.first);
   double y = (a.second - b.second);
   return sqrt(x*x + y*y);
}

double dist(const pair<pdd, pdd> &path) {
   return dist(path.first, path.second);
}

bool within(const Point &a, const Line &path) {
   return ((a.x > path.p1.x) || (fabs(a.x - path.p1.x) < EPS)) &&
      ((a.x < path.p2.x) || (fabs(a.x - path.p2.x) < EPS)) &&
      ((a.y < max(path.p1.y, path.p2.y)) ||
       (fabs(a.y - max(path.p1.y, path.p2.y)) < EPS)) &&
      ((a.y > min(path.p1.y, path.p2.y)) ||
       (fabs(a.y - min(path.p1.y, path.p2.y)) < EPS));
}

bool within(const pdd &a, const pair<pdd, pdd> &path) {
   return ((a.first > path.first.first) ||
	   (fabs(a.first - path.first.first) < EPS)) &&
      ((a.first < path.second.first) ||
	 (fabs(a.first - path.second.first) < EPS)) &&
      ((a.second  < max(path.first.second, path.second.second)) ||
       (fabs(a.second - max(path.first.second, path.second.second)) < EPS)) &&
      ((a.second > min(path.first.second, path.second.second)) ||
       (fabs(a.second - min(path.second.second, path.first.second)) < EPS));
}

bool overall(const pair<pdd, pdd> &a, const Line &path) {
   return (min(a.first.first, a.second.first) < min(path.p1.x, path.p2.x)) &&
      (max(a.first.first, a.second.first) > max(path.p1.x, path.p2.x)) &&
      // this is the way to get it to work for the testing data I am not sure
      // about it
      (min(a.first.second, a.second.second) > min(path.p1.y, path.p2.y)) &&
      (max(a.first.second, a.second.second) < max(path.p1.y, path.p2.y));
}



int main(){
   
   Circle towers[101];
   int n;
   Line path;
   pair<pdd, pdd> coverage[100];
   while(cin >> n >> path.p1.x >> path.p1.y >> path.p2.x >> path.p2.y) {
      
      if(path.p1.x > path.p2.x) {
	 Point c;
	 c.x = path.p1.x;
	 c.y = path.p1.y;
	 path.p1.x = path.p2.x;
	 path.p1.y = path.p2.y;
	 path.p2.x = c.x;
	 path.p2.y = c.y;
      }
      int j = 0;
      Point a, b;
      // reads in the towers and determines where they cover the path
      for(int i = 0; i < n; ++i) {
	 cin >> towers[i].centre.x >> towers[i].centre.y >> towers[i].radius;
	 a.x = a.y = b.x = b.y = -200.0;
	 int num = intersect_iline_circle(path, towers[i], a, b);

	 if(num == 1) {
	    if(within(a, path)) {
	       coverage[j].first.first = coverage[j].second.first = a.x;
	       coverage[j].first.second = coverage[j].second.second = a.y;
	       j++;
	    }
	 } else if(num == 2) {
	    if(b.x < a.x) {
	       Point c;
	       c.x = b.x;
	       c.y = b.y;
	       b.x = a.x;
	       b.y = a.y;
	       a.x = c.x;
	       a.y = c.y;
	    }
	    if(within(a, path) || within(b, path)) {
	       if(within(a, path)) {
		  coverage[j].first.first = a.x;
		  coverage[j].first.second = a.y;
	       } else {
		  coverage[j].first.first = path.p1.x;
		  coverage[j].first.second = path.p1.y;
	       }
	       
	       if(within(b, path)) {
		  coverage[j].second.first = b.x;
		  coverage[j].second.second = b.y;
	       } else {
		  coverage[j].second.first = path.p2.x;
		  coverage[j].second.second = path.p2.y;
	       }
	       ++j;
	    } else if(overall(coverage[j], path)) {
	       coverage[j].first.first = path.p1.x;
	       coverage[j].first.second = path.p1.y;
	       coverage[j].second.first = path.p2.x;
	       coverage[j].second.second = path.p2.y;
	       ++j;
	    } 
	 }
      }

      n = j;
      // sorting the list of lines
      sort(coverage, coverage + n);

      
      // getting rid of the overlapping areas
      for(int i = 0; i < n; ++i) {
	 for(int j = i + 1; j < n; ++j) {
	    if(within(coverage[j].first, coverage[i])) {
	       if(dist(coverage[i].first, coverage[j].second)
		  > dist(coverage[i])) {

		  coverage[i].second.first = coverage[j].second.first;
		  coverage[i].second.second = coverage[j].second.second;
	       }
	       coverage[j].first.first =
		  coverage[j].first.second =
		  coverage[j].second.first =
		  coverage[j].second.second = -200;
	       
	    }
	 }
      }

      double distance = 0.0;
      for(int i = 0; i < n; ++i) {
	 distance += dist(coverage[i]);
      }
      cout << fixed << setprecision(2);
      cout << (distance / dist(path)) * 100.0 << endl;
      
   }
   
  return 0;
}
