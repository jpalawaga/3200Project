//*****************************************************************************
// CPSC 3200          Professor: Howard Cheng
//                    Teaching Assistant: Darcy Best
// Written By: Camara Lerner
// Problem number: 5736 - Contour Tracing
// Description: 
//*****************************************************************************
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
//                   W  NW   N  NE   E  SE   S  SW
const int dr[8] = {  0, -1, -1, -1,  0,  1,  1,  1};
const int dc[8] = { -1, -1,  0,  1,  1,  1,  0, -1};
char board[202][202];
bool contour[202][202]; // will hold all the pixels in all the contours

void move(int &r, int &c, int &pr) {
   for(int i = 0; i < 8; ++i) {
      if(board[r + dr[(pr + i) % 8]][c + dc[(pr + i) % 8]] == '1') {
	 r += dr[(pr + i) % 8];
	 c += dc[(pr + i) % 8];
	 pr = (pr + i + 4) % 8;
	 return;
      }
   }
   return;
}

int traceContour(const int &r, const int &c) {
   int sr = r, sc = c, pr = 0;
   bool visited[202][202];
   int pixels = 1;
   contour[r][c] = visited[r][c] = true;
   move(sr,sc, pr);
   while(sr != r && sc != c) {
      //cout << sr << " " << sc << endl;
      if(!visited[sr][sc]) {
	 ++pixels;
      }
      contour[sr][sc] = visited[sr][sc] = true;
      move(sr, sc, pr);
   }
   return pixels;
}

int main() {
   int rows, cols;
   while(cin >> rows >> cols && rows != 0 && cols != 0) {
      for(int i = 0; i <= max(rows, cols) + 1; ++i) {
	 board[0][i] = board[i][0] = board[rows + 1][i]
	    = board[i][cols + 1] = '0';
	 contour[0][i] = contour[i][0] = contour[rows + 1][i]
	    = contour[i][cols + 1] = false;
      }
      for(int i = 1; i <= rows; ++i) {
	 for(int j = 1; j <= cols; ++j) {
	    cin >> board[i][j];
	    contour[i][j] = false;
	 }
      }
      vector<int> ans;
      for(int i = 1; i <= rows; ++i) {
	 for(int j = 1; j <=cols; ++j) {
	    cout << board[i][j];
	    if(board[i][j] == '1') {
	       if(!contour[i][j]) {
		  int pixels = traceContour(i,j);
		  if( pixels > 5) {
		     ans.push_back(pixels);
		  }
	       } else {
		  ++i; j = 0;
	       }
	    }
	 }
	 cout << endl;
      }
      sort(ans.begin(), ans.end());
      for(vector<int>::size_type i = 0; i < ans.size(); ++i) {
	 if(i != 0) {
	    cout << " ";
	 }
	 cout << ans[i];
      }
      cout << endl;
	  
   }
   

   return 0;
}

